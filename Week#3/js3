//Session Managment
require('dotenv').config();
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

const app = express();
app.use(express.json()); // Parse JSON bodies

const users = []; // In-memory user store (replace with a database)

// Secret key for JWT (store this in an .env file)
const SECRET_KEY = process.env.JWT_SECRET || "supersecretkey";

// Generate JWT Token
function generateToken(user) {
    return jwt.sign({ id: user.id, username: user.username }, SECRET_KEY, { expiresIn: '15m' });
}

// Register user
app.post('/register', async (req, res) => {
    const { username, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = { id: users.length + 1, username, password: hashedPassword };
    users.push(user);
    res.json({ message: "User registered successfully" });
});

// Login user and generate a token
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    const user = users.find(u => u.username === username);
    
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(401).json({ error: "Invalid credentials" });
    }

    const token = generateToken(user);
    res.json({ token });
});
ðŸ“Œ 3. Protect Routes (Token Verification)
ðŸ”¹ b. Middleware to check authentication
javascript
Copy
Edit
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Format: "Bearer TOKEN"

    if (!token) return res.sendStatus(401); // No token, unauthorized

    jwt.verify(token, SECRET_KEY, (err, user) => {
        if (err) return res.sendStatus(403); // Token invalid
        req.user = user;
        next();
    });
}

// Protected route example
app.get('/profile', authenticateToken, (req, res) => {
    res.json({ message: `Welcome ${req.user.username}!`, user: req.user });
});

const tokenBlacklist = new Set();

app.post('/logout', (req, res) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    
    if (token) {
        tokenBlacklist.add(token);
    }
    
    res.json({ message: "Logged out successfully" });
});

// Middleware update: Check token blacklist
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token || tokenBlacklist.has(token)) return res.sendStatus(401);

    jwt.verify(token, SECRET_KEY, (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
}

const refreshTokens = new Set(); // Store refresh tokens in memory

// Generate refresh token
app.post('/token', (req, res) => {
    const { token } = req.body;
    if (!token || !refreshTokens.has(token)) return res.sendStatus(403);

    jwt.verify(token, SECRET_KEY, (err, user) => {
        if (err) return res.sendStatus(403);
        const newAccessToken = generateToken(user);
        res.json({ accessToken: newAccessToken });
    });
});

// Logout and remove refresh token
app.post('/logout', (req, res) => {
    const { token } = req.body;
    refreshTokens.delete(token);
    res.json({ message: "Logged out" });
});

const redis = require('redis');
const client = redis.createClient();

client.on('error', err => console.log('Redis Error:', err));
client.connect(); // Connect Redis

// Store session in Redis
app.post('/store-session', async (req, res) => {
    const { username, token } = req.body;
    await client.set(username, token, { EX: 900 }); // Expire in 15 minutes
    res.json({ message: "Session stored" });
});

// Retrieve session
app.get('/session/:username', async (req, res) => {
    const token = await client.get(req.params.username);
    if (!token) return res.status(404).json({ error: "Session not found" });
    res.json({ token });
});


const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
