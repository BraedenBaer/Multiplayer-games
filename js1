//UUID
import uuid

def generate_player_id():
    return str(uuid.uuid4())

player_id = generate_player_id()
print(f"Generated Player ID: {player_id}")

from flask import Flask, jsonify
import uuid

app = Flask(__name__)

@app.route('/generate_id', methods=['GET'])
def generate_id():
    player_id = str(uuid.uuid4())
    return jsonify({"player_id": player_id})

if __name__ == '__main__':
    app.run(debug=True)

    {"player_id": "a3f71f52-9b29-4d34-a7b9-60e5f2db3e85"}

    CREATE TABLE players (
        id SERIAL PRIMARY KEY,
        uuid UUID DEFAULT gen_random_uuid(),
        username VARCHAR(255) NOT NULL
    );
    import psycopg2
    import uuid
    
    # Connect to PostgreSQL
    conn = psycopg2.connect(
        dbname="your_db",
        user="your_user",
        password="your_password",
        host="localhost",
        port="5432"
    )
    cursor = conn.cursor()
    
    # Generate a new UUID for the player
    player_uuid = str(uuid.uuid4())
    cursor.execute("INSERT INTO players (uuid, username) VALUES (%s, %s) RETURNING id;", (player_uuid, "Player1"))
    player_id = cursor.fetchone()[0]
    conn.commit()
    
    print(f"New Player Created: ID={player_id}, UUID={player_uuid}")
    
    cursor.close()
    conn.close()
    
    import asyncio
import websockets
import uuid

connected_players = {}

async def player_handler(websocket, path):
    player_id = str(uuid.uuid4())
    connected_players[websocket] = player_id
    print(f"Player connected: {player_id}")

    try:
        async for message in websocket:
            print(f"Received from {player_id}: {message}")
    finally:
        print(f"Player {player_id} disconnected")
        del connected_players[websocket]

start_server = websockets.serve(player_handler, "localhost", 8765)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()

