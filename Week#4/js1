//  Implementing Deterministic Logic
using UnityEngine;

public static class FixedPointMath
{
    private const int SCALE_FACTOR = 1000; // 1.000 in fixed-point

    public static int ToFixed(float value)
    {
        return Mathf.RoundToInt(value * SCALE_FACTOR);
    }

    public static float ToFloat(int fixedValue)
    {
        return (float)fixedValue / SCALE_FACTOR;
    }

    public static int Multiply(int a, int b)
    {
        return (a * b) / SCALE_FACTOR;
    }

    public static int Divide(int a, int b)
    {
        return (a * SCALE_FACTOR) / b;
    }
}

using UnityEngine;

public class FixedPointMovement : MonoBehaviour
{
    private int fixedPositionX;
    private int fixedSpeed;
    
    void Start()
    {
        fixedPositionX = FixedPointMath.ToFixed(transform.position.x); 
        fixedSpeed = FixedPointMath.ToFixed(2.5f); // Movement speed
    }

    void Update()
    {
        int deltaTimeFixed = FixedPointMath.ToFixed(Time.deltaTime);

        // Move right by fixedSpeed * deltaTime
        fixedPositionX += FixedPointMath.Multiply(fixedSpeed, deltaTimeFixed);
        
        // Convert back to float for Unity's Transform
        transform.position = new Vector3(FixedPointMath.ToFloat(fixedPositionX), transform.position.y, transform.position.z);
    }
}